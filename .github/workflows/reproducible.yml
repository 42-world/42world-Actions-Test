name: Reproducible

on:
  issue_comment:
    types: [created, edited, deleted]

jobs:
  reproducible:
    name: Reproducible
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check if comment is a +1
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const comment = context.payload.comment;
            return (comment.body.includes('+1') || comment.body.includes(':+1:')) && comment.user.login !== 'github-actions[bot]';
      - name: Add label
        if: steps.check.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function reproducible() {
              const issue = context.issue;
              const labels = context.payload.issue.labels;
              const hasLabel = labels.some(l => l.name.startsWith('rep:'));
              core.info(hasLabel);
              if (!hasLabel) {
                labels.forEach(async (l) => {
                  if (l.name.startsWith('rep:')) {
                    await github.issues.removeLabel({
                      ...issue,
                      name: l.name
                    });
                    if (l.name.split(':')[1] <= 3) {
                      const label = l.name.split(':')[0] + ':' + (parseInt(l.name.split(':')[1]) + 1).toString();
                      await github.issues.addLabels({
                        ...issue,
                        labels: [label]
                      });
                      if (l.name.split(':')[1] == 3) {
                        await github.issues.addLabels({
                          ...issue,
                          labels: ['reproducible']
                        });
                      }
                    }
                  }
                })
              } else {
                await github.issues.addLabels({
                  ...issue,
                  labels: ['rep:1']
                });
              }
            }
            reproducible();


